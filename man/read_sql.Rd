% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_sql.R
\name{read_sql}
\alias{read_sql}
\title{read_sql}
\usage{
read_sql(sql_query, bucket, output_folder = "__athena_temp__/",
  return_df_as = "tibble", timeout = NULL)
}
\arguments{
\item{sql_query}{A string specifying the SQL query you want to send to athena. See packages github readme for info on the flavour of SQL Athena uses.}

\item{bucket}{The s3 bucket the query results will be written into.  You must have read and write permissions to this folder.}

\item{output_folder}{The folder path where you want your athena query to be written to. If not specified the output folder is "__athena_temp__" which is recommended.}

\item{return_df_as}{String specifying what the table should be returned as i.e. 'dataframe' (reads data using read.csv), 'tibble' (reads data using readr::read_csv) or 'data.table' (reads data using data.table::fread). Default is 'tibble'. Not all tables returned are a DataFrame class.
Only return_df_as set to 'tibble' maintains date and datetime formats. dataframe and data.table will convert date and datetimes to characters.}

\item{timeout}{Specifies How long you want your sql query to wait before it gives up (in seconds). Default parameter is NULL which will mean SQL query will not timeout and could wait forever if an issue occured.}
}
\value{
A table as a Dataframe, tibble or data.table
}
\description{
uses boto3 (in python) to send an sql query to athena and return an R dataframe, tibble or data.table based on user preference.
}
\details{
Will send an SQL query to athena and wait for it to complete. Once the query has completed the resulting sql query will be read using read.csv (base R), read_csv (readr) or fread (data.table).
Function returns dataframe. If needing more a more bespoke or self defined data reading function and arguments use dbtools::get_athena_query_response to send an SQL query and return the s3 path to data in csv format.
}
\examples{
# Read an sql query using readr::read_csv i.e. returning a Tibble
df <- dbtools::read_sql("SELECT * from crest_v1.flatfile limit 10000", 'my-bucket')
df
}
